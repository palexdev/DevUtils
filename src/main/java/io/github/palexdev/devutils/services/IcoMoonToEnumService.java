package io.github.palexdev.devutils.services;

import io.github.palexdev.devutils.parsers.IcoMoonToEnumParser;
import io.github.palexdev.devutils.services.base.FileServiceBase;
import io.github.palexdev.devutils.utils.FileUtils;
import io.github.palexdev.mfxcore.base.properties.resettable.ResettableStringProperty;
import org.springframework.stereotype.Component;

@Component
public class IcoMoonToEnumService extends FileServiceBase<String> {
    //================================================================================
    // Static Properties
    //================================================================================
    public static final String DESCRIPTION = """
        This service's purpose is to convert icon fonts generated by the IcoMoon web app
        to a list of constants to be used in Java enumerators. All constants will have the
        icon's identifier, also called 'description', and the code point which is the unicode
        identifier in the font.
        """;

    //================================================================================
    // Properties
    //================================================================================
    private final ResettableStringProperty name = new ResettableStringProperty("", "");
    private final ResettableStringProperty path = new ResettableStringProperty("", "");
    private final ResettableStringProperty size = new ResettableStringProperty("", "");
    private final ResettableStringProperty type = new ResettableStringProperty("", "");
    private final ResettableStringProperty nLines = new ResettableStringProperty("", "");

    //================================================================================
    // Constructors
    //================================================================================
    public IcoMoonToEnumService(IcoMoonToEnumParser parser) {
        super(parser);

        outputProperty().set("");
        outputProperty().setDefaultValue("");
        name.setFireChangeOnReset(true);
        path.setFireChangeOnReset(true);
        size.setFireChangeOnReset(true);
        type.setFireChangeOnReset(true);
        nLines.setFireChangeOnReset(true);

        parser.setOnLineParsed(this::ok);
        parser.setOnParsed(this::ok);
    }

    //================================================================================
    // Overridden Methods
    //================================================================================
    @Override
    public String parse() {
        String out = getOutput();
        if (out.isBlank()) {
            out = parser.parse();
            setOutput(out);
        }
        return out;
    }

    @Override
    protected boolean init() {
        if (!super.init()) return false;

        setName(file.getName());
        setPath(file.getPath());
        setSize(FileUtils.sizeToString(file));
        setType(FileUtils.getExtension(file));
        setnLines(String.valueOf(parser.read().size()));
        setValid(true);
        ok("File Read");
        onInit(true);
        return true;
    }

    @Override
    protected void reset() {
        super.reset();
        name.reset();
        path.reset();
        size.reset();
        type.reset();
        nLines.reset();
        outputProperty().reset();
        resetLogs();
        onReset();
    }

    @Override
    public void resetLogs() {
        super.resetLogs();
        log("---------- IcoMoonToEnum Logging ----------");
        log("");
    }

    @Override
    protected void onFileNotValid(Throwable t) {
        error(t.getMessage());
    }

    //================================================================================
    // Getters/Setters
    //================================================================================
    public String getName() {
        return name.get();
    }

    public ResettableStringProperty nameProperty() {
        return name;
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getPath() {
        return path.get();
    }

    public ResettableStringProperty pathProperty() {
        return path;
    }

    public void setPath(String path) {
        this.path.set(path);
    }

    public String getSize() {
        return size.get();
    }

    public ResettableStringProperty sizeProperty() {
        return size;
    }

    public void setSize(String size) {
        this.size.set(size);
    }

    public String getType() {
        return type.get();
    }

    public ResettableStringProperty typeProperty() {
        return type;
    }

    public void setType(String type) {
        this.type.set(type);
    }

    public String getnLines() {
        return nLines.get();
    }

    public ResettableStringProperty nLinesProperty() {
        return nLines;
    }

    public void setnLines(String nLines) {
        this.nLines.set(nLines);
    }
}
