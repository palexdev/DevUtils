package io.github.palexdev.devutils.model;

import io.github.palexdev.devutils.settings.SettingsDB;
import io.github.palexdev.devutils.utils.FileUtils;
import io.github.palexdev.devutils.views.IcoMoonToEnumView;
import io.github.palexdev.mfxcore.base.properties.resettable.ResettableBooleanProperty;
import io.github.palexdev.mfxcore.base.properties.resettable.ResettableStringProperty;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;

public class IcoMoonToEnumModel implements ServiceModel {
    //================================================================================
    // Properties
    //================================================================================
    private File file;
    private final ResettableStringProperty name = new ResettableStringProperty("", "");
    private final ResettableStringProperty path = new ResettableStringProperty("", "");
    private final ResettableStringProperty size = new ResettableStringProperty("", "");
    private final ResettableStringProperty type = new ResettableStringProperty("", "");
    private final ResettableStringProperty lines = new ResettableStringProperty("", "");
    private final ResettableBooleanProperty valid = new ResettableBooleanProperty(false, false);
    private List<String> fLines;

    private final Parser parser;

    //================================================================================
    // Constructors
    //================================================================================
    public IcoMoonToEnumModel() {
        name.setFireChangeOnReset(true);
        path.setFireChangeOnReset(true);
        size.setFireChangeOnReset(true);
        type.setFireChangeOnReset(true);
        lines.setFireChangeOnReset(true);
        valid.setFireChangeOnReset(true);
        this.parser = new Parser();
    }

    //================================================================================
    // Methods
    //================================================================================
    protected void init() {
        reset();
        if (file == null) return;
        if (!parser.isFileValid()) {
            view().error("File %s is not valid".formatted(file.getName()));
            return;
        }

        setName(file.getName());
        setPath(file.getPath());
        setSize(FileUtils.sizeToString(file));
        setType(FileUtils.getExtension(file));
        setLines(String.valueOf(getFileLines().size()));
        setValid(true);
        view().ok("File read");
    }

    protected void reset() {
        name.reset();
        path.reset();
        size.reset();
        type.reset();
        lines.reset();
        valid.reset();
        fLines = null;
        view().resetLogs();
    }

    public List<String> getFileLines() {
        if (file == null) return List.of();
        try {
            fLines = Files.readAllLines(file.toPath());
        } catch (IOException ex) {
            view().error(ex.getMessage());
            return List.of();
        }
        return fLines;
    }

    public String parse() {
        return parser.parse();
    }

    //================================================================================
    // Overridden Methods
    //================================================================================
    @Override
    public IcoMoonToEnumView view() {
        return IcoMoonToEnumView.get();
    }

    //================================================================================
    // Internal Classes
    //================================================================================
    private class Parser {

        public boolean isFileValid() {
            if (file == null) return false;
            List<String> lines = getFileLines();
            return lines.parallelStream().anyMatch(s -> s.contains("metadata") || s.contains("Generated by IcoMoon"));
        }

        public String parse() {
            String prefix = SettingsDB.ICOMOON_PREFIX.get();
            StringBuilder sb = new StringBuilder();
            List<String> filtered = getFileLines().stream()
                .filter(s -> s.contains("glyph-name"))
                .toList();

            AtomicInteger cnt = new AtomicInteger();
            filtered.forEach(s -> {
                String[] parsed = parseLine(s);
                String name = parsed[0].replace("-", "_")
                    .replace("\"", "")
                    .toUpperCase();
                if (Character.isDigit(name.charAt(0)))
                    name = "_" + name;

                String desc = parsed[0]
                    .replace("\"", "")
                    .toLowerCase();
                String code = "'\\u" + parsed[1].toUpperCase() + "'";
                String constant = "%s(\"%s\", %s),\n".formatted(name, prefix + desc, code);
                sb.append(constant);
                view().ok("Parsed icon: %s".formatted(name));
                cnt.incrementAndGet();
            });
            sb.append(";");
            view().ok("Parsed %d icons".formatted(cnt.get()));
            return sb.toString();
        }

        public String[] parseLine(String line) {
            String[] tokens = line.replace("<glyph ", "")
                .replace(" />", "")
                .trim()
                .split(" ");
            String code = tokens[0].split("=")[1]
                .replace("\"", "")
                .replace("&#x", "")
                .replace(";", "");
            String name = tokens[1].split("=")[1];
            return new String[]{name, code};
        }
    }

    //================================================================================
    // Getters/Setters
    //================================================================================

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
        init();
    }

    public String getName() {
        return name.get();
    }

    public ResettableStringProperty nameProperty() {
        return name;
    }

    public void setName(String name) {
        this.name.set(name);
    }

    public String getPath() {
        return path.get();
    }

    public ResettableStringProperty pathProperty() {
        return path;
    }

    public void setPath(String path) {
        this.path.set(path);
    }

    public String getSize() {
        return size.get();
    }

    public ResettableStringProperty sizeProperty() {
        return size;
    }

    public void setSize(String size) {
        this.size.set(size);
    }

    public String getType() {
        return type.get();
    }

    public ResettableStringProperty typeProperty() {
        return type;
    }

    public void setType(String type) {
        this.type.set(type);
    }

    public String getLines() {
        return lines.get();
    }

    public ResettableStringProperty linesProperty() {
        return lines;
    }

    public void setLines(String lines) {
        this.lines.set(lines);
    }

    public boolean isValid() {
        return valid.get();
    }

    public ResettableBooleanProperty validProperty() {
        return valid;
    }

    public void setValid(boolean valid) {
        this.valid.set(valid);
    }
}
